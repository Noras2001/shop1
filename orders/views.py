# shop1/orders/views.py
import os
import logging
from dotenv import load_dotenv
import telebot
from django.contrib.auth.decorators import login_required
from django.shortcuts import get_object_or_404, render, redirect
from .models import Order, OrderItem
from user.models import CustomUser
from cart.models import Cart
from .forms import OrderForm

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telebot
bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)

@login_required
def create_order(request):
    cart = Cart.objects.filter(user=request.user).first()
    if not cart or cart.items.count() == 0:
        return redirect('cart:cart_detail')

    if request.method == 'POST':
        form = OrderForm(request.POST)
        if form.is_valid():
            order = form.save(commit=False)
            order.user = request.user

            # –†–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ –æ–±—â—É—é —Å—É–º–º—É
            total = sum(item.product.price * item.quantity for item in cart.items.select_related('product'))
            order.total = total
            order.save()

            # –°–æ–∑–¥–∞–Ω–∏–µ OrderItems —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Ç–æ–≤–∞—Ä–∞
            for item in cart.items.select_related('product'):
                image_url = item.product.image.url if item.product.image else ''
                OrderItem.objects.create(
                    order=order,
                    product=item.product,
                    quantity=item.quantity,
                    price=item.product.price,
                    product_image=image_url
                )

            # –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
            cart.items.all().delete()

            return redirect('orders:order_confirm', order_id=order.id)
        else:
            return render(request, 'orders/order_form.html', {'form': form})
    else:
        form = OrderForm()
        return render(request, 'orders/order_form.html', {'form': form})

def send_telegram_notification(order):
    """ –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–µ –≤ Telegram —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏."""
    if not TELEGRAM_BOT_TOKEN or not TELEGRAM_CHAT_ID:
        logger.error("TELEGRAM_BOT_TOKEN –∏–ª–∏ TELEGRAM_CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        return

    message = (
        f"üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order.id}!\n"
        f"üìç –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {order.address}\n"
        f"üìÖ –î–∞—Ç–∞: {order.delivery_date}\n"
        f"‚è∞ –í—Ä–µ–º—è: {order.delivery_time}\n"
        f"‚úçÔ∏è –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {order.comment or '–Ω–µ—Ç'}\n"
        f"üí∞ –°—É–º–º–∞: {order.total:.2f} —Ä—É–±.\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {order.user.phone}\n"
        f"üìß Email: {order.user.email}\n"
        f"–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {order.payment_method}\n"
    )

    try:
        bot.send_message(TELEGRAM_CHAT_ID, message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram: {e}")

@login_required
def order_confirm(request, order_id):
    order = get_object_or_404(Order, id=order_id, user=request.user)
    
    if request.method == 'POST':
        order.is_confirmed = True
        order.save()

        try:
            send_telegram_notification(order)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

        return redirect('orders:order_success', order_id=order.id)

    return render(request, 'orders/order_confirm.html', {'order': order})

@login_required
def order_success(request, order_id):
    order = get_object_or_404(Order, id=order_id, user=request.user)
    return render(request, 'orders/order_success.html', {'order': order})
